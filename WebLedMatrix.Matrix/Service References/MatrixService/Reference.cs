//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebLedMatrix.Matrix.MatrixService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MatrixService.IMatrixService", CallbackContract=typeof(WebLedMatrix.Matrix.MatrixService.IMatrixServiceCallback))]
    public interface IMatrixService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatrixService/RegisterMatrix")]
        void RegisterMatrix(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMatrixService/RegisterMatrix")]
        System.IAsyncResult BeginRegisterMatrix(string name, System.AsyncCallback callback, object asyncState);
        
        void EndRegisterMatrix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatrixService/UnRegisterMatrix")]
        void UnRegisterMatrix(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMatrixService/UnRegisterMatrix")]
        System.IAsyncResult BeginUnRegisterMatrix(string name, System.AsyncCallback callback, object asyncState);
        
        void EndUnRegisterMatrix(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatrixServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatrixService/UpdateText")]
        void UpdateText(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMatrixService/UpdateText")]
        System.IAsyncResult BeginUpdateText(string text, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateText(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatrixServiceChannel : WebLedMatrix.Matrix.MatrixService.IMatrixService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatrixServiceClient : System.ServiceModel.DuplexClientBase<WebLedMatrix.Matrix.MatrixService.IMatrixService>, WebLedMatrix.Matrix.MatrixService.IMatrixService {
        
        private BeginOperationDelegate onBeginRegisterMatrixDelegate;
        
        private EndOperationDelegate onEndRegisterMatrixDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterMatrixCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnRegisterMatrixDelegate;
        
        private EndOperationDelegate onEndUnRegisterMatrixDelegate;
        
        private System.Threading.SendOrPostCallback onUnRegisterMatrixCompletedDelegate;
        
        public MatrixServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatrixServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatrixServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatrixServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatrixServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterMatrixCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnRegisterMatrixCompleted;
        
        public void RegisterMatrix(string name) {
            base.Channel.RegisterMatrix(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegisterMatrix(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterMatrix(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRegisterMatrix(System.IAsyncResult result) {
            base.Channel.EndRegisterMatrix(result);
        }
        
        private System.IAsyncResult OnBeginRegisterMatrix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginRegisterMatrix(name, callback, asyncState);
        }
        
        private object[] OnEndRegisterMatrix(System.IAsyncResult result) {
            this.EndRegisterMatrix(result);
            return null;
        }
        
        private void OnRegisterMatrixCompleted(object state) {
            if ((this.RegisterMatrixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterMatrixCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterMatrixAsync(string name) {
            this.RegisterMatrixAsync(name, null);
        }
        
        public void RegisterMatrixAsync(string name, object userState) {
            if ((this.onBeginRegisterMatrixDelegate == null)) {
                this.onBeginRegisterMatrixDelegate = new BeginOperationDelegate(this.OnBeginRegisterMatrix);
            }
            if ((this.onEndRegisterMatrixDelegate == null)) {
                this.onEndRegisterMatrixDelegate = new EndOperationDelegate(this.OnEndRegisterMatrix);
            }
            if ((this.onRegisterMatrixCompletedDelegate == null)) {
                this.onRegisterMatrixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterMatrixCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterMatrixDelegate, new object[] {
                        name}, this.onEndRegisterMatrixDelegate, this.onRegisterMatrixCompletedDelegate, userState);
        }
        
        public void UnRegisterMatrix(string name) {
            base.Channel.UnRegisterMatrix(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnRegisterMatrix(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnRegisterMatrix(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnRegisterMatrix(System.IAsyncResult result) {
            base.Channel.EndUnRegisterMatrix(result);
        }
        
        private System.IAsyncResult OnBeginUnRegisterMatrix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginUnRegisterMatrix(name, callback, asyncState);
        }
        
        private object[] OnEndUnRegisterMatrix(System.IAsyncResult result) {
            this.EndUnRegisterMatrix(result);
            return null;
        }
        
        private void OnUnRegisterMatrixCompleted(object state) {
            if ((this.UnRegisterMatrixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnRegisterMatrixCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnRegisterMatrixAsync(string name) {
            this.UnRegisterMatrixAsync(name, null);
        }
        
        public void UnRegisterMatrixAsync(string name, object userState) {
            if ((this.onBeginUnRegisterMatrixDelegate == null)) {
                this.onBeginUnRegisterMatrixDelegate = new BeginOperationDelegate(this.OnBeginUnRegisterMatrix);
            }
            if ((this.onEndUnRegisterMatrixDelegate == null)) {
                this.onEndUnRegisterMatrixDelegate = new EndOperationDelegate(this.OnEndUnRegisterMatrix);
            }
            if ((this.onUnRegisterMatrixCompletedDelegate == null)) {
                this.onUnRegisterMatrixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnRegisterMatrixCompleted);
            }
            base.InvokeAsync(this.onBeginUnRegisterMatrixDelegate, new object[] {
                        name}, this.onEndUnRegisterMatrixDelegate, this.onUnRegisterMatrixCompletedDelegate, userState);
        }
    }
}
